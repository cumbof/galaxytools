<?xml version="1.0"?>
<tool name="index" id="metasbt_index" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="@PROFILE@" license="MIT">
    <description>genomes with Sequence Bloom Trees or update an existing database</description>

    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="creator"/>
    <expand macro="requirements"/>

    <command detect_errors="exit_code">
<![CDATA[
#set workdir="./workdir"
#set input_dir="${workdir}/genomes"

mkdir -p ${input_dir} &&

#for $genome in $genomes:
    #if $genome.ext.endswith("gz"):
        gunzip "$genome" > "${input_dir}/${genome.name}.fna" &&
    #else
        ln -s "$genome" "${input_dir}/${genome.name}.fna" &&
    #end if
#end for

#if $advanced.index_update_conditional.index_update_option == "false":
    while IFS=$'\t' read -r seq_name seq_taxonomy; do 
        if [ -f "${input_dir}/${seq_name}.fna" ]; then
            echo -e "${input_dir}/${seq_name}.fna\t${seq_taxonomy}" >> ${input_dir}/genomes.tsv;
        fi
    done < $references &&

    metasbt index --workdir $workdir \
                  --database Database \
                  --references ${input_dir}/genomes.tsv \
                  --nproc \${GALAXY_SLOTS:-4} \
                  --pack \

            #if $advanced.index_update_conditional.bfs_selection.bfs_auto == "false":
                  --filter-size $advanced.index_update_conditional.bfs_selection.bfs_size \
            #else:
                  --increase-filter-size $advanced.index_update_conditional.bfs_selection.bfs_size_increase \
                  --min-kmer-occurrences $advanced.index_update_conditional.bfs_selection.min_kmer_occurrences \
            #end if

            #if $advanced.index_update_conditional.kmers_selection.kmers_auto == "false":
                  --kmer-size $advanced.index_update_conditional.kmers_selection.kmer_len \
            #else:
                  --limit-kmer-size $advanced.index_update_conditional.kmers_selection.max_kmer_len \
            #end if

            #if $advanced.dereplication_selection.dereplication == "true":
                  --dereplicate $advanced.dereplication_selection.distance_threshold \
            #end if

            #if $advanced.quality_control_selection.quality_control == "true":
                  --completeness $advanced.quality_control_selection.completeness \
                  --contamination $advanced.quality_control_selection.contamination \
            #end if

            &&

    ln -s ${workdir}/Database/clusters.tsv clusters.tsv &&
    ln -s ${workdir}/Database/genomes.tsv genomes.tsv &&

#else:
    find ${input_dir} -type f -name "*.fna" -exec realpath {} >> ${input_dir}/genomes.txt \; &&

    #if $advanced.index_update_conditional.database_selection.source == "cvmfs":
        #set tarball_filepath="${workdir}/${advanced.index_update_conditional.database_selection.db_tarball}"
    #else:
        #set tarball_filepath="${workdir}/${advanced.index_update_conditional.database_selection.db_tarball.name}"
    #end if

    ln -s "${advanced.index_update_conditional.database_selection.db_tarball}" "${tarball_filepath}" &&

    metasbt unpack --workdir $workdir \
                   --tarball ${tarball_filepath} &&

    metasbt update --workdir $workdir \
                   --database $(basename "$tarball_filepath" | cut -d'-' -f2) \
                   --genomes ${input_dir}/genomes.txt \
                   --nproc \${GALAXY_SLOTS:-4} \
                   --pack \

            #if $advanced.dereplication_selection.dereplication == "true":
                   --dereplicate $advanced.dereplication_selection.distance_threshold \
            #end if

            #if $advanced.quality_control_selection.quality_control == "true":
                   --completeness $advanced.quality_control_selection.completeness \
                   --contamination $advanced.quality_control_selection.contamination \
            #end if

            &&

    rm ${tarball_filepath} &&

    ln -s "${workdir}/$(basename "$tarball_filepath" | cut -d'-' -f2)/clusters.tsv" clusters.tsv &&
    ln -s "${workdir}/$(basename "$tarball_filepath" | cut -d'-' -f2)/genomes.tsv" genomes.tsv &&
#end if

mv "$(find ${workdir} -maxdepth 1 -name '*.tar.gz' -print -quit)" MetaSBT-Database.tar.gz
]]>
    </command>

    <inputs>
        <!-- Input genomes -->
        <param name="genomes" format="fa,fasta,fna,fa.gz,fasta.gz,fna.gz" multiple="true" type="data"
               label="Input genomes"
               help="Select a set of input genomes." />

        <!-- Optional file with mapping betweek input file names and their taxonomic label -->
        <param name="taxonomies" format="tsv" multiple="false" type="data" optional="true"
               label="Input table with taxonomic labels"
               help="Optional two-columns table with the input file names and their full taxonomic labels. This is not required in case the input files are not reference genomes." />

        <!-- Advanced options -->
        <section name="advanced" expanded="true"
                 title="Advanced options"
                 help="Access advanced options to customize kmer length, bloom filter size, and other settings.">

            <!-- Show different options in case of index or update -->
            <conditional name="index_update_conditional">
                <param name="index_update_option" type="boolean" checked="false" truevalue="true" falsevalue="false" 
                       label="Update a MetaSBT database" 
                       help="When enabled, most of the advanced options are inherited from an already existing database and cannot be modified." />

                <when value="false">
                    <!-- Index -->
                    <!-- Estimate a kmer length -->
                    <conditional name="kmers_selection">
                        <!-- Enable kmer length estimation -->
                        <param name="kmers_auto" type="boolean" checked="true" truevalue="true" falsevalue="false"
                               label="Estimate a proper kmer length"
                               help="Automatically estimate a proper kmer length for the input set of genomes with Kitsune." />

                        <when value="true">
                            <!-- Limit kmer length -->
                            <param name="max_kmer_len" type="integer" value="21" min="8" max="127"
                                   label="Max kmer length"
                                   help="Limit the length of kmers for the estimation of the best kmer length with Kitsune." />
                        </when>

                        <when value="false">
                            <!-- Kmer length -->
                            <param name="kmer_len" type="integer" value="21" min="8" max="127"
                                   label="Set a kmer length"
                                   help="Set the length of kmers." />
                        </when>
                    </conditional>

                    <!-- Estimate the bloom filter size -->
                    <conditional name="bfs_selection">
                        <!-- Enable bloom filter size estimation -->
                        <param name="bfs_auto" type="boolean" checked="true" truevalue="true" falsevalue="false"
                               label="Estimate the bloom filter size"
                               help="Automatically estimate the most appropriate bloom filter size that better fits with the input set of genomes with ntCard." />

                        <when value="true">
                            <!-- Increment the estimated bloom filter size -->
                            <param name="bfs_size_increase" type="float" value="5" min="0" max="100"
                                   label="Increment the bloom filter size"
                                   help="Increment the estimated bloom filter size by this percentage in case you are planning to update the database with new genomes in future." />

                            <!-- Minimum number of occurrences of kmers computed with ntCard -->
                            <param name="min_kmer_occurrences" type="integer" value="1" min="1"
                                   label="Min kmer occurrences"
                                   help="Minimum number of occurrences of kmers to be considered for the estimation of the bloom filter size and for building the bloom filter sketches." />
                        </when>

                        <when value="false">
                            <!-- Bloom filter size -->
                            <param name="bfs_size" type="integer" value="10000"
                                   label="Bloom filter size"
                                   help="Set a bloom filter size for building genome or sequence sketches." />
                        </when>
                    </conditional>
                </when>

                <when value="false">
                    <!-- Index -->
                    <conditional name="database_selection">
                        <!-- Select a MetaSBT database -->
                        <!-- The boundaries table is in the tarball -->
                        <param name="source" type="select"
                                label="Will you select a MetaSBT database from your history or a public database?"
                                help="Public databases are hosted on the Galaxy CVMFS.">
                            <option value="cvmfs">Use a public database</option>
                            <option value="history">Use a database from the history</option>
                        </param>

                        <when value="cvmfs">
                            <param name="db_tarball" type="select"
                                    label="Select a public MetaSBT database"
                                    help="Choose a specific version of a database.">
                                <options from_data_table="metasbt_databases">
                                    <column name="value" index="2" />
                                    <column name="name" format="${0} (v${1})" />
                                    <filter type="sort_by" column="1" />
                                </options>
                                <validator type="no_options" message="There are no MetaSBT databases available." />
                            </param>
                        </when>

                        <when value="history">
                            <param name="db_tarball" type="data" format="tar.gz"
                                    label="Select a MetaSBT database" />
                        </when>
                    </conditional>
                </when>
            </conditional>

            <conditional name="dereplication_selection">
                <!-- Enable the dereplication of input genomes -->
                <param name="dereplication" type="boolean" checked="false" truevalue="true" falsevalue="false"
                    label="Dereplication"
                    help="Enable the dereplication of input genomes based on their ANI distance." />

                <when value="true">
                    <!-- ANI distance threshold -->
                    <param name="distance_threshold" type="float" value="0.01" min="0.0" max="1.0"
                        label="Distance threshold"
                        help="Set a threshold based on the ANI distance of the sketch representation of the input genomes versus themselves and the other genomes in the database (in case of an update)." />
                </when>
            </conditional>

            <conditional name="quality_control_selection">
                <!-- Enable the quality control of input genomes -->
                <param name="quality_control" type="boolean" checked="false" truevalue="true" falsevalue="false"
                    label="Quality Control"
                    help="Filter out genomes based on their completeness and contamination." />

                <when value="true">
                    <!-- Completeness -->
                    <param name="completeness" type="float" value="90.0" min="0.0" max="100.0"
                        label="Completeness threshold"
                        help="Set a threshold on the completeness and discard everything below this threshold." />

                    <!-- Contamination -->
                    <param name="contamination" type="float" value="5.0" min="0.0" max="100.0"
                        label="Contamination threshold"
                        help="Set a threshold on the contamination and discard everything above this threshold." />
                </when>
            </conditional>
        </section>
    </inputs>

    <outputs>
        <!-- Table with known and unknown clusters -->
        <data format="tsv" name="clusters" label="${tool.name} on ${on_string}: clusters" from_work_dir="clusters.tsv">
            <action>
                <action name="column_names" type="metadata" default="Cluster,Lineage,MAGs,References,Bloom Filter Density,Mean Completeness,Mean Contamination" />
                <action name="column_types" type="metadata" default="str,str,int,int,float,float,float" />
                <action name="comment_lines" type="metadata" default="4" />
            </action>
        </data>

        <!-- Table with list of genomes and their assignments -->
        <data format="tsv" name="genomes" label="${tool.name} on ${on_string}: genomes" from_work_dir="genomes.tsv">
            <actions>
                <action name="column_names" type="metadata" default="Input,Assignment,Cluster" />
                <action name="column_types" type="metadata" default="str,str,str" />
                <action name="comment_lines" type="metadata" default="1" />
            </actions>
        </data>

        <!-- Database as compressed tarball -->
        <data format="tar.gz" name="database" label="${tool.name} on ${on_string}: database" from_work_dir="MetaSBT-Database.tar.gz" />
    </outputs>

    <tests>
        <test>
            <!-- Add test cases here -->
        </test>
    </tests>

    <help>
<![CDATA[
**What it does**

MetaSBT is a scalable framework for the characterization of known and still unknown microbial genomes with Sequence Bloom Trees.
This tool act as an interface to the `index` and `update` subroutines of MetaSBT for the generation and update of new or predefined public databases.

-----

.. class:: infomark

Please visit the official GitHub repository_ for additional information about MetaSBT.
Public MetaSBT Databases are available at the official MetaSBT-DBs_ repository.

.. _repository: https://github.com/cumbof/MetaSBT
.. _MetaSBT-DBs: https://github.com/cumbof/MetaSBT-DBs
]]>
    </help>

    <expand macro="citations"/>
</tool>
